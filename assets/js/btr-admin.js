jQuery(document).ready(function($) {    /* ===================================       Inizializzazione Plugin    ==================================== */    // Inizializza Select2 se disponibile    if ($.fn.select2) {        $('.select2').select2({            placeholder: 'Seleziona un\'opzione',            allowClear: true,            width: '100%',            minimumResultsForSearch: Infinity // Nasconde la barra di ricerca        });    }    // Inizializza Tooltip se disponibile    if ($.fn.tooltip) {        $('.tooltip').tooltip({            content: function () {                return $(this).attr('title');            },            tooltipClass: 'btr-tooltip'        });    }    /* ===================================       Gestione Sezioni Collassabili    ==================================== */    // Toggle singole sezioni    $('.btr-section.collapsible h2').click(function() {        var $section = $(this).parent();        $section.toggleClass('active');        var $icon = $(this).find('.toggle-section');        if ($section.hasClass('active')) {            $icon.removeClass('dashicons-arrow-down-alt2').addClass('dashicons-arrow-up-alt2');        } else {            $icon.removeClass('dashicons-arrow-up-alt2').addClass('dashicons-arrow-down-alt2');        }    });    // Toggle tutte le sezioni    var allSectionsCollapsed = false;    $('#toggle-all-sections').click(function(e) {        e.preventDefault();        if (allSectionsCollapsed) {            // Espande tutte le sezioni            $('.btr-section').addClass('active');            $('.btr-section .section-content').slideDown();            $('.btr-section .toggle-section').removeClass('dashicons-arrow-down-alt2').addClass('dashicons-arrow-up-alt2');            $(this).text('Collassa tutte le sezioni');            allSectionsCollapsed = false;        } else {            // Collassa tutte le sezioni            $('.btr-section').removeClass('active');            $('.btr-section .section-content').slideUp();            $('.btr-section .toggle-section').removeClass('dashicons-arrow-up-alt2').addClass('dashicons-arrow-down-alt2');            $(this).text('Espandi tutte le sezioni');            allSectionsCollapsed = true;        }    });    /* ===================================       Gestione Visualizzazione Campi    ==================================== */    // Funzione per gestire la visualizzazione dei campi in base alla tipologia di prenotazione    function toggleBookingTypeFields() {        var bookingType = $('#btr_tipologia_prenotazione').val();        if (bookingType === 'per_tipologia_camere') {            $('#sezione_disponibilita_camere_case1').show();            $('#sezione_disponibilita_camere_case3').show();            $('#sezione_disponibilita_camere_case2').hide();            $('#sezione_numero_persone').hide();        } else if (bookingType === 'per_numero_persone') {            $('#sezione_disponibilita_camere_case1').hide();            $('#sezione_disponibilita_camere_case3').hide();            $('#sezione_disponibilita_camere_case2').show();            $('#sezione_numero_persone').show();            updatePeopleCount(); // Aggiorna il contatore inizialmente        } else if (bookingType === 'allotment_camere') {            $('#sezione_disponibilita_camere_case1').hide();            $('#sezione_disponibilita_camere_case2').hide();            $('#sezione_disponibilita_camere_case3').show();            $('#sezione_numero_persone').hide();        }    }    // Inizializza la visualizzazione corretta al caricamento della pagina    toggleBookingTypeFields();    // Aggiorna la visualizzazione quando cambia il valore del select    $(document).on('change', 'input[name="btr_tipologia_preno"]', function() {        toggleBookingTypeFields();    });    // Funzione per gestire la visualizzazione dei campi di durata    function toggleDurataFields() {        var tipoDurata = $('#btr_tipo_durata').val();        if (tipoDurata === 'unita_libere') {            $('#durata_unita_libere').css('display', 'flex');            $('#durata_unita_fisse').css('display', 'none');        } else if (tipoDurata === 'unita_fisse') {            $('#durata_unita_libere').css('display', 'none');            $('#durata_unita_fisse').css('display', 'flex');        } else {            $('#durata_unita_libere, #durata_unita_fisse').css('display', 'none');        }    }    // Inizializza la visualizzazione corretta al caricamento della pagina    toggleDurataFields();    // Aggiorna la visualizzazione quando cambia il valore del select    $('#btr_tipo_durata').on('change', function() {        toggleDurataFields();    });    /* ===================================       Gestione Campi Dinamici    ==================================== */    // Funzione per aggiungere e rimuovere campi dinamici    function initDynamicFields(containerSelector, addButtonSelector, itemClass, itemTemplate) {        var index = 0;        // Calcola l'indice massimo giÃ  usato tra gli item esistenti (per evitare sovrascritture)        $(containerSelector).children(itemClass).each(function() {            // Trova il primo input di testo o numero, o data, per ricavare l'indice            var nameAttr = $(this).find('input[type="text"],input[type="number"],input[type="date"]').first().attr('name');            var match = nameAttr && nameAttr.match(/\[(\d+)\]/);            if (match && parseInt(match[1]) >= index) {                index = parseInt(match[1]) + 1;            }        });        $(addButtonSelector).click(function(e) {            e.preventDefault();            var newItem = itemTemplate(index);            $(containerSelector).append(newItem);            // Debug: logga il numero attuale di elementi dopo l'inserimento            console.log('[DEBUG] Campi attuali in', containerSelector, ':', $(containerSelector).children(itemClass).length);            index++;        });        $(document).on('click', containerSelector + ' .remove-item', function(e) {            e.preventDefault();            $(this).closest(itemClass).remove();            // Dopo la rimozione, potresti voler aggiornare gli indici se necessario            // Debug: logga il numero attuale di elementi dopo la rimozione            console.log('[DEBUG] Campi attuali in', containerSelector, ':', $(containerSelector).children(itemClass).length);        });    }    // Inizializza campi dinamici con drag and drop    function initSortableFields(containerSelector) {        if ($.fn.sortable) {            $(containerSelector).sortable({                handle: '.drag-handle',                update: function(event, ui) {                    // Aggiorna gli indici dei campi dopo il riordino                    $(containerSelector).children().each(function(index) {                        $(this).find('input, select, textarea').each(function() {                            var name = $(this).attr('name');                            if (name) {                                name = name.replace(/\[\d+\]/, '[' + index + ']');                                $(this).attr('name', name);                            }                        });                    });                }            });        }    }    /* ===================================       Inizializzazione Campi Dinamici    ==================================== */    // Date Ranges    initDynamicFields('#btr-date-ranges', '#add-date-range', '.btr-date-range', function(index) {        return `        <div class="btr-date-range">            <span class="dashicons dashicons-move drag-handle"></span>            <div class="btr-inline-fields">                <div class="btr-field-group">                    <label for="start_date_${index}">Data Inizio</label>                     <input type="date" name="btr_date_ranges[${index}][start]" value="" id="start_date_${index}" />                </div>                <div class="btr-field-group">                    <label for="end_date_${index}">Data Fine</label>                     <input type="date" name="btr_date_ranges[${index}][end]" value="" id="end_date_${index}" />                </div>                <div class="btr-field-group">                    <label for="formatted_date_${index}">Data rinominata</label>                     <input type="text" name="btr_date_ranges[${index}][name]" value="" id="formatted_date_${index}" readonly />                </div>                <button class="remove-item button">Rimuovi</button>            </div>        </div>    `;    });    initSortableFields('#btr-date-ranges');    // Aggiungi gli event listener per aggiornare "Data rinominata"    $(document).on('change', '.btr-date-range input[type="date"]', function() {        const $range = $(this).closest('.btr-date-range');        const startDate = $range.find('input[name*="[start]"]').val();        const endDate = $range.find('input[name*="[end]"]').val();        const formattedInput = $range.find('input[name*="[name]"]');        if (startDate && endDate) {            const formatted = formatDateRange(startDate, endDate);            formattedInput.val(formatted);        } else {            formattedInput.val('');        }    });    // Funzione per formattare la data    function formatDateRange(startDate, endDate) {        const start = new Date(startDate);        const end = new Date(endDate);        const startDay = start.getDate();        const startMonth = capitalizeFirstLetter(start.toLocaleString('it-IT', { month: 'long' }));        const startYear = start.getFullYear();        const endDay = end.getDate();        const endMonth = capitalizeFirstLetter(end.toLocaleString('it-IT', { month: 'long' }));        const endYear = end.getFullYear();        if (startMonth === endMonth && startYear === endYear) {            return `${startDay} - ${endDay} ${startMonth} ${startYear}`;        } else {            return `${startDay} ${startMonth} - ${endDay} ${endMonth} ${endYear}`;        }    }    // Funzione per mettere la prima lettera in maiuscolo    function capitalizeFirstLetter(string) {        return string.charAt(0).toUpperCase() + string.slice(1);    }    // Costi Extra    initDynamicFields('#btr-costi-extra', '#add-costo-extra-item', '.btr-extra-cost-card', function(index) {        return `    <div class="btr-extra-cost-card">        <span class="dashicons dashicons-move drag-handle"></span>        <div class="btr-extra-cost-fields">            <div class="btr-field-group">                <label>Nome Costo Extra</label>                <input type="text" name="btr_costi_extra[${index}][nome]" value="" />            </div>            <div class="btr-field-group">                <label>Importo (â¬)</label>                <input type="number" name="btr_costi_extra[${index}][importo]" value="" step="0.01" min="0" />            </div>            <!--            <div class="btr-field-group">                <label>Sconto (%)</label>                <input type="number" name="btr_costi_extra[${index}][sconto]" step="0.01" min="0" max="100" value="" />            </div>            -->            <div class="btr-field-group btr-checkbox-group">                <label>                    <input type="checkbox" name="btr_costi_extra[${index}][moltiplica_persone]" value="1" checked /> Persone                </label>                <!--                <label>                    <input type="checkbox" name="btr_costi_extra[${index}][moltiplica_durata]" value="1" /> Durata                </label>                -->            </div>        </div>        <button class="remove-item button">Rimuovi</button>    </div>    `;    });    initSortableFields('#btr-costi-extra');    // Supplementi    initDynamicFields('#btr-supplementi', '#add-supplemento-item', '.btr-supplemento-item', function(index) {        return `            <div class="btr-supplemento-item">                <span class="dashicons dashicons-move drag-handle"></span>                <div class="btr-field-group">                    <label>Nome Supplemento</label>                    <input type="text" name="btr_supplementi[${index}][nome]" value="" />                </div>                <div class="btr-field-group">                    <label>Prezzo (â¬)</label>                    <input type="number" name="btr_supplementi[${index}][prezzo]" value="" step="0.01" min="0" />                </div>                <button class="remove-item button">Rimuovi</button>            </div>        `;    });    initSortableFields('#btr-supplementi');    // Riduzioni    initDynamicFields('#btr-riduzioni', '#add-riduzione-item', '.btr-riduzione-item', function(index) {        return `            <div class="btr-riduzione-item">                <span class="dashicons dashicons-move drag-handle"></span>                <div class="btr-field-group">                    <label>Nome Riduzione</label>                    <input type="text" name="btr_riduzioni[${index}][nome]" value="" />                </div>                <div class="btr-field-group">                    <label>Prezzo (â¬)</label>                    <input type="number" name="btr_riduzioni[${index}][prezzo]" value="" step="0.01" min="0" />                </div>                <button class="remove-item button">Rimuovi</button>            </div>        `;    });    initSortableFields('#btr-riduzioni');    // Il Pacchetto Comprende    initDynamicFields('#btr-include-items', '#add-include-item', '.btr-include-item', function(index) {        return `            <div class="btr-include-item">                <span class="dashicons dashicons-move drag-handle"></span>                <div class="btr-field-group">                    <label>Elemento</label>                    <input type="text" name="btr_include_items[${index}]" value="" class="widefat" />                </div>                <button class="remove-item button">Rimuovi</button>            </div>        `;    });    initSortableFields('#btr-include-items');    // Il Pacchetto Non Comprende    initDynamicFields('#btr-exclude-items', '#add-exclude-item', '.btr-exclude-item', function(index) {        return `            <div class="btr-exclude-item">                <span class="dashicons dashicons-move drag-handle"></span>                <div class="btr-field-group">                    <label>Elemento</label>                    <input type="text" name="btr_exclude_items[${index}]" value="" class="widefat" />                </div>                <button class="remove-item button">Rimuovi</button>            </div>        `;    });    initSortableFields('#btr-exclude-items');    // Assicurazione Annullamento    // Gestisce i campi dinamici per la sezione assicurazione annullamento (importi per combinazione)    initDynamicFields('#btr-assicurazione-importi', '#add-assicurazione-item', '.btr-assicurazione-item', function(index) {        return `            <div class="btr-assicurazione-item">                <span class="dashicons dashicons-move drag-handle"></span>                <div class="btr-field-group">                    <label>Descrizione Combinazione</label>                    <input type="text" name="btr_assicurazione_importi[${index}][descrizione]" value="" />                </div>                <div class="btr-field-group">                    <label>Importo (â¬)</label>                    <input type="number" name="btr_assicurazione_importi[${index}][importo]" value="" step="0.01" min="0" />                </div>                <button class="remove-item button">Rimuovi</button>            </div>        `;    });    initSortableFields('#btr-assicurazione-importi');    /* ===================================       Validazione Form    ==================================== */    // Validazione in Tempo Reale    if ($.fn.validate) {        $('#post').validate({            ignore: [],            errorClass: 'error',            rules: {                btr_destinazione: "required",                btr_prezzo_base: {                    required: true,                    number: true,                    min: 0                },                // Aggiungi altre regole di validazione se necessario            },            messages: {                btr_destinazione: "Per favore, inserisci la destinazione.",                btr_prezzo_base: {                    required: "Per favore, inserisci il prezzo base.",                    number: "Per favore, inserisci un numero valido.",                    min: "Il valore deve essere positivo."                },                // Aggiungi altri messaggi di errore se necessario            }        });    }    // Feedback Visivo per Campi Obbligatori    $('input, select').on('invalid', function() {        $(this).addClass('error');    }).on('input change', function() {        $(this).removeClass('error');    });    /* ===================================       Funzioni Personalizzate    ==================================== */    // Funzione per aggiornare il numero di persone giÃ  assegnate e quelle rimanenti    function updatePeopleCount() {        var totalPeople = 0;        var totlaCount = $('#btr_num_persone_max_case2').val();        // CapacitÃ  per tipologia di camera        var capacities = {            'singole_max': 1,            'doppie_max': 2,            'triple_max': 3,            'quadruple_max': 4,            'quintuple_max': 5,            'condivisa_max': 1        };        // Calcola il totale delle persone basato sulle camere selezionate        $.each(capacities, function(roomId, capacity) {            var roomCount = parseInt($('#btr_num_' + roomId).val(), 10) || 0;            totalPeople += roomCount * capacity;        });        // Mostra quante persone sono giÃ  sistemate (assegnate)        $('#assigned-people').html(totalPeople+'<span>/'+totlaCount+'</span>');        // Ottieni il numero massimo di persone impostato        var maxPeopleCount = parseInt($('#btr_num_persone_max_case2').val(), 10) || 0;        // Calcola le persone rimanenti        var remainingPeople = maxPeopleCount - totalPeople;        // Aggiorna il contatore visivo        $('#remaining-people').html(remainingPeople+'<span>/'+totlaCount+'</span>');        // Controlla se il totale supera il massimo        if (remainingPeople < 0) {            // Mostra l'alert visivo            $('#people-alert').show();        } else {            // Nascondi l'alert visivo            $('#people-alert').hide();        }    }    // Funzione per gestire la visualizzazione dei campi di prezzo in base alla tipologia di prenotazione    function togglePriceFields() {        var bookingType = $('#btr_tipologia_prenotazione').val();        if (bookingType === 'per_tipologia_camere') {            $('#prezzo-unita-durata').show();            $('#tariffa-base-fissa').hide();        } else if (bookingType === 'per_numero_persone') {            $('#prezzo-unita-durata').hide();            $('#tariffa-base-fissa').show();            updatePeopleCount(); // aggiorna il contatore inizialmente        }    }    // Funzione per applicare lo sconto globale    function applicaScontoGlobale() {        // Verifica se il checkbox Ã¨ selezionato        if ($('input[name="btr_apply_global_sconto"]').is(':checked')) {            // Recupera il valore dello sconto            let sconto = $('input[name="btr_sconto_percentuale"]').val();            // Assicurati che il valore dello sconto sia un numero valido            if (!isNaN(sconto) && sconto !== "") {                // Inserisci lo sconto in tutti gli elementi target                $('.room-discount input, .btr-room-discount input').val(sconto);            } else {                // Se il valore non Ã¨ valido, svuota i campi                $('.room-discount input, .btr-room-discount input').val('');            }        } else {            // Se il checkbox non Ã¨ selezionato, svuota i campi            $('.room-discount input, .btr-room-discount input').val('');        }    }    // Evento per il cambio dello stato del checkbox    $('input[name="btr_apply_global_sconto"]').on('change', function () {        applicaScontoGlobale();    });    // Evento per il cambio del valore dello sconto globale    $('input[name="btr_sconto_percentuale"]').on('input', function () {        applicaScontoGlobale();    });    $('input[name="btr_show_box_sconto_g"]').on('change', function () {        if ($('input[name="btr_show_box_sconto_g"]').is(':checked')) {            $('.btr-section-content').addClass('show');        } else {            $('.btr-section-content').removeClass('show');        }    });    /* ===================================       Inizializzazione Funzioni    ==================================== */    // Inizializza la visualizzazione corretta dei campi al caricamento della pagina    togglePriceFields();    // Aggiorna la visualizzazione quando cambia il valore del select "Tipologia di Prenotazione"    $('#btr_tipologia_prenotazione').on('change', function() {        togglePriceFields();    });    // Aggiorna il conteggio ogni volta che si cambia il numero di camere    $('.room-input').on('input change', function() {        updatePeopleCount();    });    // Gestione Pulsanti Incremento e Decremento    $('.counter-btn').on('click', function() {        var targetInput = $(this).data('target');        var $input = $(targetInput);        var value = parseInt($input.val(), 10) || 0;        if ($(this).hasClass('increase')) {            $input.val(value + 1).trigger('change');        } else if ($(this).hasClass('decrease') && value > 0) {            $input.val(value - 1).trigger('change');        }    });    // Aggiorna il conteggio quando il numero massimo di persone viene modificato    $('#btr_num_persone_max_case2').on('input change', function() {        updatePeopleCount();    });    $(document).on('click', '.camere_case2 .qty-count', function() {        updatePeopleCount();    });    $(document).on('click', '.max_numero_persone2 .qty-count', function() {        updatePeopleCount();    });    $('.info-icon').on('mouseenter', function () {        var $tooltip = $(this).find('.tooltip');        var $wrapper = $(this).closest('.apb-wrapper-form');        if ($wrapper.length) {            var wrapperWidth = $wrapper.outerWidth();            // Imposta la larghezza massima del tooltip in base al contenitore            var maxTooltipWidth = wrapperWidth - 40; // Margine di sicurezza (20px per lato)            if (maxTooltipWidth < 200) {                maxTooltipWidth = 200; // Minima larghezza            }            $tooltip.css('max-width', maxTooltipWidth + 'px');        } else {            // Usa una larghezza di default se non c'Ã¨ un wrapper            $tooltip.css('max-width', '300px');        }        // Calcola la posizione del tooltip e regola se esce dallo schermo        var tooltipOffset = $tooltip.offset();        var tooltipWidth = $tooltip.outerWidth();        var viewportWidth = $(window).width();        if (tooltipOffset.left + tooltipWidth > viewportWidth) {            var diff = (tooltipOffset.left + tooltipWidth) - viewportWidth + 10;            $tooltip.css('left', '50%');            $tooltip.css('transform', 'translateX(calc(-50% - ' + diff + 'px))');        } else {            $tooltip.css('left', '50%');            $tooltip.css('transform', 'translateX(-50%)');        }    }).on('mouseleave', function () {        var $tooltip = $(this).find('.tooltip');        $tooltip.css('left', '50%');        $tooltip.css('transform', 'translateX(-50%)');    });    const $radioInputs = $('input[name="btr_tipologia_preno"]');    const $hiddenInput = $('#btr_tipologia_prenotazione');    // Quando cambia un'opzione radio, aggiorna l'input nascosto    $radioInputs.on('change', function () {        if ($(this).is(':checked')) {            $hiddenInput.val($(this).val());        }    });    // Imposta il valore iniziale nell'input nascosto se c'Ã¨ una radio giÃ  selezionata    const $checkedRadio = $radioInputs.filter(':checked');    if ($checkedRadio.length > 0) {        $hiddenInput.val($checkedRadio.val());    }});