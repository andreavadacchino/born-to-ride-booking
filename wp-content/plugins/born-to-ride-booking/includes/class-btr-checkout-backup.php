<?php/** * Born To Ride – Checkout customization for WooCommerce Blocks * * Nasconde il riepilogo standard dei blocchi React (Cart / Checkout) * e stampa un riepilogo personalizzato basato sui metadati del preventivo. * * Il preventivo usato viene salvato in sessione dal metodo che converte * il preventivo stesso in carrello tramite: * *   WC()->session->set( 'btr_preventivo_id', $preventivo_id ); * * Author: Born To Ride Booking * Version: 1.0.0 */if ( ! defined( 'ABSPATH' ) ) {	exit;}if ( ! class_exists( 'BTR_Checkout' ) ) {	class BTR_Checkout {		/**		 * Singleton instance.		 *		 * @var BTR_Checkout		 */		private static $instance = null;		/**		 * Return the singleton instance.		 *		 * @return BTR_Checkout		 */		public static function instance() {			if ( null === self::$instance ) {				self::$instance = new self();			}			return self::$instance;		}		/**		 * Hook all the things.		 */		public function __construct() {			// Nascondi il riepilogo standard dei Blocks.			add_action( 'wp_enqueue_scripts', [ $this, 'hide_blocks_summary_css' ], 20 );			// Enqueue foglio di stile custom (solo su checkout).			add_action( 'wp_enqueue_scripts', [ $this, 'enqueue_assets' ] );			// Stampa il riepilogo personalizzato (checkout classico).			add_action( 'woocommerce_checkout_after_order_review', [ $this, 'print_custom_summary' ], 5 );			// Stampa il riepilogo personalizzato anche nel checkout Blocks.			add_action( 'woocommerce_before_checkout_form', [ $this, 'print_custom_summary_for_blocks' ], 5 );			// Pulisci la sessione dopo l'ordine.			add_action( 'woocommerce_thankyou', [ $this, 'cleanup_session' ] );			// Regola i prezzi del carrello secondo le logiche pacchetto			add_action( 'woocommerce_before_calculate_totals', [ $this, 'adjust_cart_item_prices' ], 20, 1 );			// Includi il file del blocco			require_once plugin_dir_path( __FILE__ ) . 'blocks/btr-checkout-summary/block.php';			// Registra il blocco			add_action( 'init', [ $this, 'register_checkout_summary_block' ] );			// Inserisci automaticamente le assicurazioni selezionate nel carrello			add_action( 'woocommerce_cart_loaded_from_session', [ $this, 'ensure_insurance_cart_items' ], 9 );			// Fallback quando il carrello è appena stato creato (nessuna sessione ancora serializzata)			add_action( 'wp_loaded', [ $this, 'ensure_insurance_cart_items' ], 9 );		}		/* ------------------------------------------------------------------- */		/*  Front‑end		/* ------------------------------------------------------------------- */		/**		 * Aggiunge un CSS inline che nasconde il riepilogo standard		 * di Cart / Checkout Blocks.		 */		public function hide_blocks_summary_css() {			if ( ! is_checkout() ) {				return;			}			// wc-blocks-style è sempre presente quando i Blocks sono abilitati.			$handle = wp_style_is( 'wc-blocks-style', 'enqueued' ) ? 'wc-blocks-style' : 'wp-block-library';			$css = '				/* Hide default Order‑Summary rendered by the Checkout Blocks */				.wp-block-woocommerce-checkout-totals-block,				.wp-block-woocommerce-checkout-order-summary-block{					/*display:none !important;*/				}				.wp-block-woocommerce-checkout-order-summary-cart-items-block.wc-block-components-totals-wrapper {				   display:none !important;                }			';			wp_add_inline_style( $handle, $css );		}		/**		 * Enqueue eventuali asset CSS/JS per il riepilogo custom.		 */		public function enqueue_assets() {			if ( ! is_checkout() ) {				return;			}			// Corretto percorso assets/css (non asstes/css)			$style_path = plugin_dir_path( __FILE__ ) . '../assets/css/btr-checkout.css';			$style_url  = plugin_dir_url( __FILE__ ) . '../assets/css/btr-checkout.css';			$version = file_exists( $style_path ) ? filemtime( $style_path ) : null;			wp_enqueue_style(				'btr-checkout',				$style_url,				[],				$version			);			/* -----------------------------------------------------------------			 * React bundle per il riepilogo custom			 * ----------------------------------------------------------------- */			$script_path = plugin_dir_path( __FILE__ ) . '../assets/js/btr-checkout-summary.js';			$script_url  = plugin_dir_url( __FILE__ ) . '../assets/js/btr-checkout-summary.js';			$script_version = file_exists( $script_path ) ? filemtime( $script_path ) : null;			wp_enqueue_script(				'btr-checkout-summary',				$script_url,				[					'wp-element',      // React / ReactDOM wrapper					'wp-i18n',					'wp-components',					'wp-hooks',					'wc-blocks'        // assicura che i Blocks di WooCommerce siano caricati prima				],				$script_version,				true			);		}		/**		 * Stampa il riepilogo custom nella pagina di checkout.		 */		public function print_custom_summary() {			if ( ! is_checkout() ) {				return;			}			$preventivo_id = WC()->session->get( 'btr_preventivo_id' );			if ( ! $preventivo_id ) {				return;			}			echo $this->get_summary_html( (int) $preventivo_id ); // phpcs:ignore WordPress.Security.EscapeOutput.OutputNotEscaped		}		/**		 * Rimuove il preventivo salvato in sessione una volta completato l'ordine.		 */		public function cleanup_session() {			WC()->session->__unset( 'btr_preventivo_id' );		}		/**		 * Stampa il riepilogo custom anche nel checkout Blocks (React).		 */		public function print_custom_summary_for_blocks() {			if ( ! function_exists( 'wc_get_container' ) ) {				return; // Non è il checkout blocks.			}			if ( ! is_checkout() ) {				return;			}			$preventivo_id = WC()->session->get( 'btr_preventivo_id' );			if ( ! $preventivo_id ) {				return;			}			// Output di un container per il componente React del summary			echo '<div id="btr-checkout-react-summary" style="margin-bottom:24px;"></div>';			// Script per montare il componente React			?>			<script>			document.addEventListener('DOMContentLoaded', function() {				// Assicurati che il bundle React contenente BTRCustomSummary sia stato caricato.				if ( typeof BTRCustomSummary !== 'undefined' ) {					BTRCustomSummary({						containerId: 'btr-checkout-react-summary',						summaryHtml: <?php echo json_encode( $this->get_summary_html( (int) $preventivo_id ) ); ?>					});				}			});			</script>			<?php		}		/**		 * Registra il blocco di riepilogo checkout		 */		public function register_checkout_summary_block() {			if ( ! function_exists( 'register_block_type' ) ) {				return;			}			// Registra lo stile			wp_register_style(				'btr-checkout-summary-style',				plugin_dir_url(__FILE__) . 'blocks/btr-checkout-summary/style.css',				[],				filemtime(plugin_dir_path(__FILE__) . 'blocks/btr-checkout-summary/style.css')			);			register_block_type(				plugin_dir_path( __FILE__ ) . 'blocks/btr-checkout-summary/block.json',				[					'render_callback' => [$this, 'render_checkout_summary_block'],					'style'          => 'btr-checkout-summary-style'				]			);			// Carica gli asset solo nel checkout			if ( is_checkout() ) {				$this->enqueue_block_assets();			}		}		/**		 * Carica gli asset del blocco		 */		private function enqueue_block_assets() {			$dir = plugin_dir_path( __FILE__ ) . 'blocks/btr-checkout-summary/build';			$url = plugin_dir_url( __FILE__ ) . 'blocks/btr-checkout-summary/build';			if ( file_exists( $dir . '/index.asset.php' ) ) {				$asset_file = include $dir . '/index.asset.php';				wp_enqueue_script(					'btr-checkout-summary',					$url . '/index.js',					$asset_file['dependencies'],					$asset_file['version'],					true				);				wp_enqueue_style(					'btr-checkout-summary',					$url . '/style-index.css',					[ 'wc-blocks-style' ],					$asset_file['version']				);			}		}		/* ------------------------------------------------------------------- */		/*  Helpers		/* ------------------------------------------------------------------- */		/**		 * Costruisce l'HTML del riepilogo personalizzato.		 *		 * @param int $preventivo_id ID del post preventivo.		 * @return string		 */		private function get_summary_html( $preventivo_id ) {			if ( ! $preventivo_id || 'preventivo' !== get_post_type( $preventivo_id ) ) { // adegua il post type se diverso				return '';			}			// --- Meta principali ------------------------------------------------			$nome_pacchetto   = get_post_meta( $preventivo_id, '_nome_pacchetto', true );			$durata           = get_post_meta( $preventivo_id, '_durata', true );			$date_range       = get_post_meta( $preventivo_id, '_date_ranges', true );			$prezzo_pacchetto = (float) get_post_meta( $preventivo_id, '_prezzo_totale', true );			$supplemento_totale = (float) get_post_meta( $preventivo_id, '_supplemento_totale', true );			$extra_night_total  = (float) get_post_meta( $preventivo_id, '_extra_night_total', true );			// --- Calcola assicurazioni & extra ---------------------------------			$anagrafici = get_post_meta( $preventivo_id, '_anagrafici_preventivo', true );			$tot_assic  = 0;			$tot_extra  = 0;			if ( is_array( $anagrafici ) ) {				foreach ( $anagrafici as $persona ) {					if ( ! empty( $persona['assicurazioni_dettagliate'] ) ) {						foreach ( $persona['assicurazioni_dettagliate'] as $ass ) {							$tot_assic += isset( $ass['importo'] ) ? (float) $ass['importo'] : 0;						}					}					if ( ! empty( $persona['costi_extra_dettagliate'] ) ) {						foreach ( $persona['costi_extra_dettagliate'] as $ex ) {							$tot_extra += isset( $ex['importo'] ) ? (float) $ex['importo'] : 0;						}					}				}			}			$grand_total = $prezzo_pacchetto + $supplemento_totale + $extra_night_total + $tot_assic + $tot_extra;			// --- Output ---------------------------------------------------------			ob_start(); ?>			<section class="btr-checkout-summary">				<h3 class="btr-summary-title"><?php echo esc_html( $nome_pacchetto ); ?></h3>				<ul class="btr-summary-list">					<?php if ( $date_range ) : ?>						<li><strong><?php esc_html_e( 'Data', 'born-to-ride-booking' ); ?>:</strong> <?php echo esc_html( $date_range ); ?></li>					<?php endif; ?>					<?php if ( $durata ) : ?>						<li><strong><?php esc_html_e( 'Durata', 'born-to-ride-booking' ); ?>:</strong> <?php echo esc_html( $durata ); ?></li>					<?php endif; ?>					<li><strong><?php esc_html_e( 'Prezzo pacchetto', 'born-to-ride-booking' ); ?>:</strong> €<?php echo number_format_i18n( $prezzo_pacchetto, 2 ); ?></li>					<?php if ( $supplemento_totale > 0 ) : ?>						<li><strong><?php esc_html_e( 'Supplemento camera', 'born-to-ride-booking' ); ?>:</strong> €<?php echo number_format_i18n( $supplemento_totale, 2 ); ?></li>					<?php endif; ?>					<?php if ( $extra_night_total > 0 ) : ?>						<li><strong><?php esc_html_e( 'Notte extra', 'born-to-ride-booking' ); ?>:</strong> €<?php echo number_format_i18n( $extra_night_total, 2 ); ?></li>					<?php endif; ?>					<?php if ( $tot_assic > 0 ) : ?>						<li><strong><?php esc_html_e( 'Assicurazioni', 'born-to-ride-booking' ); ?>:</strong> €<?php echo number_format_i18n( $tot_assic, 2 ); ?></li>					<?php endif; ?>					<?php if ( $tot_extra > 0 ) : ?>						<li><strong><?php esc_html_e( 'Costi extra', 'born-to-ride-booking' ); ?>:</strong> €<?php echo number_format_i18n( $tot_extra, 2 ); ?></li>					<?php endif; ?>				</ul>				<p class="btr-summary-total">					<strong><?php esc_html_e( 'Totale', 'born-to-ride-booking' ); ?>:</strong>					€<?php echo number_format_i18n( $grand_total, 2 ); ?>				</p>			</section>			<?php			return ob_get_clean();		}		/**		 * Adjust each cart item price to include adults, children, supplementi, and extra nights.		 *		 * @param WC_Cart $cart		 */		public function adjust_cart_item_prices( $cart ) {		    if ( is_admin() && ! defined( 'DOING_AJAX' ) ) {		        return;		    }		    foreach ( $cart->get_cart() as $cart_item_key => $cart_item ) {		        // Mantieni invariati gli articoli “extra” e “assicurazione” con prezzo custom		        if ( isset( $cart_item['from_extra'] ) || isset( $cart_item['from_assicurazione'] ) ) {			        if ( isset( $cart_item['custom_price'] ) ) {				        $cart_item['data']->set_price( $cart_item['custom_price'] );			        }			        continue;		        }		        // Only adjust package items		        if ( empty( $cart_item['prezzo_per_persona'] ) ) {		            continue;		        }		        // Person counts		        $num_persons   = intval( $cart_item['number_of_persons'] ?? 0 );		        $child_f1      = intval( $cart_item['assigned_child_f1'] ?? 0 );		        $child_f2      = intval( $cart_item['assigned_child_f2'] ?? 0 );		        $adult_count   = max( 0, $num_persons - $child_f1 - $child_f2 );		        // Unit prices		        $price_adult    = floatval( $cart_item['prezzo_per_persona'] );		        $price_child_f1 = floatval( $cart_item['price_child_f1'] ?? 0 );		        $price_child_f2 = floatval( $cart_item['price_child_f2'] ?? 0 );		        $supp_pp        = floatval( $cart_item['supplemento'] ?? 0 );		        $night_pp       = floatval( $cart_item['extra_night_pp'] ?? 0 );		        // Calculate base room cost (adults + children)		        $tot_camera = ( $price_adult * $adult_count )		                    + ( $price_child_f1 * $child_f1 )		                    + ( $price_child_f2 * $child_f2 );		        // Calculate supplement and extra nights (per person)		        $tot_supplemento = $supp_pp * $num_persons;		        $tot_extra_night = $night_pp * $num_persons;		        // Final price for this cart item		        $new_price = $tot_camera + $tot_supplemento + $tot_extra_night;		        // Apply the recalculated price		        $cart_item['data']->set_price( $new_price );		    }		}		/**		 * Assicura che ogni assicurazione selezionata nel preventivo		 * venga rappresentata come voce di prodotto (con prezzo custom) nel carrello.		 *		 * Viene richiamato sia al primo caricamento (wp_loaded) sia quando il carrello		 * viene ricaricato da sessione (woocommerce_cart_loaded_from_session).		 *		 * @param WC_Cart|null $cart		 */		public function ensure_insurance_cart_items( $cart = null ) {			if ( ! is_checkout() && ! is_cart() ) {				return; // Limitiamo l’esecuzione alle pagine rilevanti			}			if ( is_null( $cart ) ) {				$cart = WC()->cart;			}			if ( ! $cart || ! is_object( $cart ) ) {				return;			}			$preventivo_id = WC()->session->get( 'btr_preventivo_id' );			if ( ! $preventivo_id ) {				return;			}			// Evita duplicazioni: se abbiamo già inserito le assicurazioni in questa request, esci.			if ( did_action( 'btr_insurance_items_added' ) ) {				return;			}			$anagrafici = get_post_meta( $preventivo_id, '_anagrafici_preventivo', true );			if ( empty( $anagrafici ) || ! is_array( $anagrafici ) ) {				return;			}			foreach ( $anagrafici as $persona ) {				if ( empty( $persona['assicurazioni_dettagliate'] ) ) {					continue;				}				foreach ( $persona['assicurazioni_dettagliate'] as $ass ) {					$product_id   = isset( $ass['id'] ) ? intval( $ass['id'] ) : 0;					$importo      = isset( $ass['importo'] ) ? floatval( $ass['importo'] ) : 0;					$descrizione  = isset( $ass['descrizione'] ) ? sanitize_text_field( $ass['descrizione'] ) : '';					if ( ! $product_id || $importo <= 0 ) {						continue; // dati incompleti					}					// Evita di aggiungere due volte la stessa assicurazione (controllo su meta)					$already_in_cart = false;					foreach ( $cart->get_cart() as $ci ) {						if ( ! empty( $ci['from_assicurazione'] ) && intval( $ci['product_id'] ) === $product_id && $ci['custom_price'] == $importo ) {							$already_in_cart = true;							break;						}					}					if ( $already_in_cart ) {						continue;					}					$cart_data = [						'label_assicurazione' => $descrizione,						'custom_name'         => 'Assicurazione: ' . $descrizione,						'custom_price'        => $importo,						'from_assicurazione'  => 1,						'preventivo_id'       => $preventivo_id,					];					$key = $cart->add_to_cart( $product_id, 1, 0, [], $cart_data );					// Imposta immediatamente il prezzo					if ( $key && isset( $cart->cart_contents[ $key ]['data'] ) ) {						$cart->cart_contents[ $key ]['data']->set_price( $importo );					}				}			}			// Flag per evitare duplicazioni nella stessa request			do_action( 'btr_insurance_items_added' );		}	}	// Bootstrap.	BTR_Checkout::instance();}