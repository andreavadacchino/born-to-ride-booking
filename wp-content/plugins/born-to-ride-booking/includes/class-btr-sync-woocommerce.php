<?phpif ( ! defined( 'ABSPATH' ) ) {    exit; // Impedisce l'accesso diretto}class BTR_Sync_WooCommerce {    public function __construct() {        // Verifica che WooCommerce sia attivo        if ( ! class_exists( 'WooCommerce' ) ) {            add_action( 'admin_notices', array( $this, 'woocommerce_missing_notice' ) );        }    }    public function woocommerce_missing_notice() {        echo '<div class="error"><p>';        _e( 'Il plugin Born to Ride Booking richiede WooCommerce per funzionare correttamente.', 'btr' );        echo '</p></div>';    }    /**     * Sincronizza il pacchetto con WooCommerce     *     * @param int $post_id ID del post del pacchetto     */    public function sync_pacchetto( $post_id ) {        // Recupera il pacchetto        $pacchetto = get_post( $post_id );        if ( ! $pacchetto || 'btr_pacchetto' !== $pacchetto->post_type ) {            return;        }        // Recupera i metadati        $meta_values = get_post_meta( $post_id );        // Verifica se il pacchetto è già sincronizzato        $woocommerce_product_id = isset( $meta_values['btr_woocommerce_product_id'][0] ) ? intval( $meta_values['btr_woocommerce_product_id'][0] ) : 0;        if ( $woocommerce_product_id ) {            // Aggiorna il prodotto esistente            $this->update_product( $pacchetto, $meta_values, $woocommerce_product_id );        } else {            // Crea un nuovo prodotto            $woocommerce_product_id = $this->create_product( $pacchetto, $meta_values );            if ( $woocommerce_product_id ) {                update_post_meta( $post_id, 'btr_woocommerce_product_id', $woocommerce_product_id );            }        }    }    /**     * Crea un nuovo prodotto WooCommerce     *     * @param WP_Post $pacchetto     * @param array   $meta_values     * @return int|false ID del prodotto o false in caso di fallimento     */    private function create_product( $pacchetto, $meta_values ) {        // Genera uno SKU unico basato sull'ID del pacchetto        $sku = 'BTR-PACK-' . $pacchetto->ID;        // Verifica se esiste già un prodotto con questo SKU        $existing_product = wc_get_product_id_by_sku( $sku );        if ( $existing_product ) {            // Associa il prodotto esistente al pacchetto            update_post_meta( $pacchetto->ID, 'btr_woocommerce_product_id', $existing_product );            return $existing_product;        }        // Crea un nuovo prodotto        $product = new WC_Product_Variable(); // Poiché avremo varianti        // Imposta lo SKU        $product->set_sku( $sku );        // Imposta il titolo del prodotto        $product->set_name( $pacchetto->post_title );        // Imposta la descrizione        $product->set_description( $pacchetto->post_content );        // Imposta lo status        $product->set_status( $pacchetto->post_status === 'publish' ? 'publish' : 'draft' );        // Imposta il tipo di prodotto        $product->set_type( 'variable' );        // Salva il prodotto        $product_id = $product->save();        if ( $product_id ) {            // Sincronizza le tassonomie come attributi di prodotto            $this->sync_taxonomies_to_attributes( $product_id, $meta_values );            // Crea le variazioni            $this->create_variations( $product_id, $meta_values );            return $product_id;        }        return false;    }    /**     * Aggiorna un prodotto WooCommerce esistente     *     * @param WP_Post $pacchetto     * @param array   $meta_values     * @param int     $product_id     */    private function update_product( $pacchetto, $meta_values, $product_id ) {        $product = wc_get_product( $product_id );        if ( ! $product ) {            return;        }        // Aggiorna il titolo        $product->set_name( $pacchetto->post_title );        // Aggiorna la descrizione        $product->set_description( $pacchetto->post_content );        // Aggiorna lo status        $product->set_status( $pacchetto->post_status === 'publish' ? 'publish' : 'draft' );        // Salva le modifiche        $product->save();        // Sincronizza le tassonomie come attributi di prodotto        $this->sync_taxonomies_to_attributes( $product_id, $meta_values );        // Elimina tutte le variazioni esistenti e ricrea        $existing_variations = $product->get_children();        foreach ( $existing_variations as $variation_id ) {            wp_delete_post( $variation_id, true );        }        // Crea nuove variazioni        $this->create_variations( $product_id, $meta_values );    }    /**     * Sincronizza le tassonomie del pacchetto con gli attributi di prodotto WooCommerce     *     * @param int   $product_id     * @param array $meta_values     */    private function sync_taxonomies_to_attributes( $product_id, $meta_values ) {        // Assicurati che gli attributi siano abilitati per il prodotto        $product = wc_get_product( $product_id );        $attributes = array();        // Numero di Persone        if ( isset( $meta_values['pa_numero_persone'] ) && ! empty( $meta_values['pa_numero_persone'] ) ) {            $attributes['pa_numero_persone'] = array(                'name'         => 'pa_numero_persone',                'value'        => '',                'position'     => 0,                'is_visible'   => 1,                'is_variation' => 1,                'is_taxonomy'  => 1,            );        }        // Camere        if ( isset( $meta_values['pa_camere'] ) && ! empty( $meta_values['pa_camere'] ) ) {            $attributes['pa_camere'] = array(                'name'         => 'pa_camere',                'value'        => '',                'position'     => 1,                'is_visible'   => 1,                'is_variation' => 1,                'is_taxonomy'  => 1,            );        }        // Date Disponibili        if ( isset( $meta_values['pa_date_disponibili'] ) && ! empty( $meta_values['pa_date_disponibili'] ) ) {            $attributes['pa_date_disponibili'] = array(                'name'         => 'pa_date_disponibili',                'value'        => '',                'position'     => 2,                'is_visible'   => 1,                'is_variation' => 1,                'is_taxonomy'  => 1,            );        }        // Imposta gli attributi sul prodotto        $product->set_attributes( $attributes );        $product->save();    }    /**     * Crea le variazioni del prodotto basate sui dati del pacchetto     *     * @param int   $product_id     * @param array $meta_values     */    private function create_variations( $product_id, $meta_values ) {        // Ottieni le tassonomie per creare le variazioni        $tipologia_prenotazione = isset( $meta_values['btr_tipologia_prenotazione'][0] ) ? $meta_values['btr_tipologia_prenotazione'][0] : '';        // Recupera le date disponibili        $date_ranges = isset( $meta_values['btr_date_ranges'][0] ) ? maybe_unserialize( $meta_values['btr_date_ranges'][0] ) : array();        // Recupera il numero massimo di persone o camere        if ( 'per_tipologia_camere' === $tipologia_prenotazione ) {            // Per tipologia camere, le variazioni sono basate sulle camere            $camere = get_terms( array(                'taxonomy'   => 'pa_camere',                'hide_empty' => false,            ) );            foreach ( $camere as $camera ) {                $variation = new WC_Product_Variation();                $variation->set_parent_id( $product_id );                $variation->set_attributes( array(                    'pa_camere' => $camera->slug,                ) );                // Imposta il prezzo base                $prezzo_base = floatval( $meta_values['btr_prezzo_base'][0] );                $moltiplica_persone = isset( $meta_values['btr_moltiplica_prezzo_persone'][0] ) ? 'yes' : 'no';                if ( 'yes' === $moltiplica_persone ) {                    // Moltiplica il prezzo per il numero di persone                    // Recupera il numero massimo di persone                    $max_persone = intval( $meta_values['btr_num_persone_max_case2'][0] );                    $prezzo_variation = $prezzo_base * $max_persone;                } else {                    $prezzo_variation = $prezzo_base;                }                $variation->set_regular_price( $prezzo_variation );                // Imposta lo stock                $stock_quantity = intval( $meta_values[ 'btr_num_' . $camera->slug ][0] ); // Ad esempio, btr_num_singole                $variation->set_stock_quantity( $stock_quantity );                $variation->set_manage_stock( true );                // Salva la variazione                $variation_id = $variation->save();            }        } elseif ( 'per_numero_persone' === $tipologia_prenotazione ) {            // Per numero persone, le variazioni sono basate sulle persone            $numero_persone = get_terms( array(                'taxonomy'   => 'pa_numero_persone',                'hide_empty' => false,            ) );            foreach ( $numero_persone as $persona ) {                $variation = new WC_Product_Variation();                $variation->set_parent_id( $product_id );                $variation->set_attributes( array(                    'pa_numero_persone' => $persona->slug,                ) );                // Imposta il prezzo base                $tariffa_base_fissa = floatval( $meta_values['btr_tariffa_base_fissa'][0] );                $prezzo_variation = $tariffa_base_fissa;                // Applica lo sconto se presente                $sconto_percentuale = floatval( $meta_values['btr_sconto_percentuale'][0] );                if ( $sconto_percentuale > 0 ) {                    $prezzo_variation -= ( ( $sconto_percentuale / 100 ) * $prezzo_variation );                }                $variation->set_regular_price( $prezzo_variation );                // Imposta lo stock                $stock_quantity = intval( $meta_values[ 'btr_num_' . $persona->slug . '_max' ][0] ); // Ad esempio, btr_num_singole_max                $variation->set_stock_quantity( $stock_quantity );                $variation->set_manage_stock( true );                // Salva la variazione                $variation_id = $variation->save();            }        }        // Gestisci le date disponibili come attributi aggiuntivi o variazioni        // Puoi implementare ulteriori logiche qui se necessario    }}new BTR_Sync_WooCommerce();