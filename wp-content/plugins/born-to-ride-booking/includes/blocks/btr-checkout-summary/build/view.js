(function(){  'use strict';  function ready(fn){    if(document.readyState!=='loading'){ fn(); }    else document.addEventListener('DOMContentLoaded', fn);  }  function qs(selector,root){ return (root||document).querySelector(selector); }  function qsa(selector,root){ return Array.prototype.slice.call((root||document).querySelectorAll(selector)); }  function isDesktop(){ return window.matchMedia('(min-width: 783px)').matches; }  function setupSticky(card){    if(!card) return;    const wrapper = card.closest('.wp-block-btr-checkout-summary');    if(!wrapper) return;    // If the WooCommerce Blocks two-column layout is present, delegate sticky/scroll to the sidebar column    var hasBlocksSidebar = document.querySelector('.wc-block-components-sidebar') || document.querySelector('.wc-block-checkout__sidebar');    if (hasBlocksSidebar) {      // Ensure no inner sticky/scroll artifacts remain      card.classList.remove('btr-is-sticky','btr-collapsed','btr-can-scroll');      // Remove hint/toggle if they exist      var hint = card.querySelector('.btr-scroll-hint');      if(hint && hint.parentNode) hint.parentNode.removeChild(hint);      var toggle = card.querySelector('.btr-summary-toggle');      if(toggle && toggle.parentNode) toggle.parentNode.removeChild(toggle);      return;    }    // expand/collapse state    let collapsed = true;    function computeExpandedMaxH(){      const styles = getComputedStyle(wrapper);      const topVar = styles.getPropertyValue('--btr-summary-sticky-top').trim();      const top = parseInt(topVar || '16', 10) || 16;      return Math.max(280, window.innerHeight - top - 16);    }    function computeCollapsedMaxH(expanded){      const seventyVh = Math.round(window.innerHeight * 0.7);      return Math.min(expanded, Math.max(360, seventyVh));    }    function applyHeights(){      const expanded = computeExpandedMaxH();      const collapsedH = computeCollapsedMaxH(expanded);      card.style.maxHeight = (collapsed ? collapsedH : expanded) + 'px';    }    // Apply sticky class on desktop    const applySticky = () => {      if(isDesktop()) {        card.classList.add('btr-is-sticky');        applyHeights();        checkScrollable();      } else {        card.classList.remove('btr-is-sticky');        card.style.maxHeight = '';        removeToggle();        removeScrollHint();      }    };    // Scroll hint (fade at bottom) to show there is more content    let scrollHint;    function ensureScrollHint(){      if(!scrollHint){        scrollHint = document.createElement('div');        scrollHint.className = 'btr-scroll-hint';        card.appendChild(scrollHint);      }    }    function removeScrollHint(){      if(scrollHint && scrollHint.parentNode){ scrollHint.parentNode.removeChild(scrollHint); }      scrollHint = null;    }    // Expand/Collapse toggle    let toggleWrap, toggleBtn;    function ensureToggle(){      if(toggleWrap) return;      toggleWrap = document.createElement('div');      toggleWrap.className = 'btr-summary-toggle';      toggleBtn = document.createElement('button');      toggleBtn.type = 'button';      // Assign aria-controls to card id for a11y      if(!card.id){ card.id = 'btr-summary-card-' + Math.random().toString(36).slice(2,7); }      toggleBtn.setAttribute('aria-controls', card.id);      toggleBtn.setAttribute('aria-expanded', 'false');      toggleBtn.textContent = 'Mostra tutto';      toggleBtn.addEventListener('click', function(){        collapsed = !collapsed;        card.classList.toggle('btr-collapsed', collapsed);        toggleBtn.setAttribute('aria-expanded', String(!collapsed));        toggleBtn.textContent = collapsed ? 'Mostra tutto' : 'Riduci riepilogo';        applyHeights();        checkScrollable();      });      toggleWrap.appendChild(toggleBtn);      card.appendChild(toggleWrap);      // Start collapsed for very large cards      collapsed = true;      card.classList.add('btr-collapsed');    }    function removeToggle(){      if(toggleWrap && toggleWrap.parentNode){ toggleWrap.parentNode.removeChild(toggleWrap); }      toggleWrap = null; toggleBtn = null; collapsed = true;      card.classList.remove('btr-collapsed');    }    // Detect scrollability and show hint/toggle accordingly    function checkScrollable(){      const canScroll = card.scrollHeight > card.clientHeight + 12;      card.classList.toggle('btr-can-scroll', canScroll);      if(canScroll && isDesktop()){        ensureScrollHint();        ensureToggle();      } else {        removeScrollHint();        removeToggle();      }      updateHintVisibility();    }    function updateHintVisibility(){      if(!scrollHint) return;      const atBottom = Math.ceil(card.scrollTop + card.clientHeight) >= card.scrollHeight - 1;      scrollHint.style.opacity = atBottom ? '0' : '1';    }    card.addEventListener('scroll', updateHintVisibility, { passive: true });    window.addEventListener('resize', function(){ applySticky(); }, { passive: true });    // Initial apply    applySticky();    // Re-check after images/fonts load    window.addEventListener('load', function(){ checkScrollable(); }, { once: true });    setTimeout(checkScrollable, 400);  }  ready(function(){    const cards = qsa('.wp-block-btr-checkout-summary .btr-summary-card');    if(!cards.length) return;    cards.forEach(setupSticky);  });})();