<?php// File: includes/class-btr-frontend-display.phpif (!defined('ABSPATH')) {    exit; // Impedisce l'accesso diretto al file}class BTR_Frontend_Display{    public function __construct()    {        // Visualizza i dati aggiuntivi nella pagina del prodotto        add_action('woocommerce_single_product_summary', [$this, 'display_additional_product_meta'], 25);        // Aggiungi i campi personalizzati per i supplementi        add_action('woocommerce_single_variation', [$this, 'display_supplemento_and_room_addons'], 10);        // Aggiungi i dati al carrello        add_filter('woocommerce_add_cart_item_data', [$this, 'add_meta_to_cart'], 10, 2);        add_filter('woocommerce_get_item_data', [$this, 'display_meta_in_cart'], 10, 2);        // Aggiungi i dati all'ordine        add_action('woocommerce_checkout_create_order_line_item', [$this, 'add_meta_to_order'], 10, 4);        // Visualizza il supplemento nella pagina del prodotto        add_action('woocommerce_after_variations_form', [$this, 'enqueue_supplemento_js']);        // Aggiungi i supplementi al totale del carrello        add_action('woocommerce_before_calculate_totals', [$this, 'add_supplements_to_cart_totals'], 10, 1);        // Aggiungi i supplementi ai dati della variante        add_filter('woocommerce_available_variation', [$this, 'add_supplemento_to_variation_data']);    }    public function display_all_product_meta()    {        global $product;        // Recupera tutti i metadati del prodotto        $meta_data = $product->get_meta_data();        if (!empty($meta_data)) {            echo '<div class="btr-product-meta">';            echo '<h3>Tutti i Metadati del Prodotto</h3>';            echo '<table style="width:100%; border-collapse:collapse; border:1px solid #ddd;">';            echo '<thead><tr><th style="text-align:left; padding:8px; border-bottom:1px solid #ddd;">Chiave Meta</th><th style="text-align:left; padding:8px; border-bottom:1px solid #ddd;">Valore</th></tr></thead>';            echo '<tbody>';            foreach ($meta_data as $meta) {                $meta_key = esc_html($meta->key);                $meta_value = is_array($meta->value) || is_object($meta->value)                    ? '<pre>' . esc_html(print_r($meta->value, true)) . '</pre>'                    : esc_html($meta->value);                echo '<tr>';                echo '<td style="padding:8px; border-bottom:1px solid #ddd;">' . $meta_key . '</td>';                echo '<td style="padding:8px; border-bottom:1px solid #ddd;">' . $meta_value . '</td>';                echo '</tr>';            }            echo '</tbody>';            echo '</table>';            echo '</div>';        } else {            echo '<div class="btr-product-meta">';            echo '<h3>Tutti i Metadati del Prodotto</h3>';            echo '<p>Nessun metadato trovato.</p>';            echo '</div>';        }    }    /**     * Visualizza i metadati del pacchetto nella pagina prodotto.     */    public function display_additional_product_meta()    {        global $product;        $this->display_all_product_meta();        $tipologia_prenotazione = $product->get_meta('_btr_tipologia_prenotazione');        $destinazione = $product->get_meta('_btr_destinazione');        $localiata_destinazione = $product->get_meta('_btr_localiata_destinazione');        $numero_giorni = $product->get_meta('_btr_numero_giorni_fisse');        $numero_notti = $product->get_meta('_btr_numero_notti');        $costi_extra = $product->get_meta('_btr_costi_extra');        $include_items = maybe_unserialize($product->get_meta('_btr_include_items'));        $exclude_items = maybe_unserialize($product->get_meta('_btr_exclude_items'));        echo '<div class="btr-product-meta">';        echo '<h3>Dettagli del Pacchetto</h3>';        if ($tipologia_prenotazione) {            echo '<p><strong>Tipologia Prenotazione:</strong> ' . esc_html($tipologia_prenotazione) . '</p>';        }        if ($destinazione) {            echo '<p><strong>Destinazione:</strong> ' . esc_html($destinazione) . '</p>';        }        if ($numero_giorni) {            echo '<p><strong>Numero di Giorni:</strong> ' . esc_html($numero_giorni) . '</p>';        }        if ($numero_notti) {            echo '<p><strong>Numero di Notti:</strong> ' . esc_html($numero_notti) . '</p>';        }        if ($costi_extra) {            echo '<p><strong>Costi Extra:</strong> ' . esc_html($costi_extra) . '</p>';        }        if (!empty($include_items)) {            echo '<p><strong>Incluso:</strong> ' . esc_html(implode(', ', $include_items)) . '</p>';        }        if (!empty($exclude_items)) {            echo '<p><strong>Escluso:</strong> ' . esc_html(implode(', ', $exclude_items)) . '</p>';        }        echo '</div>';    }    /**     * Mostra i campi per i supplementi e le camere opzionali.     */    public function display_supplemento_and_room_addons()    {        global $product;        $tipologia_prenotazione = $product->get_meta('_btr_tipologia_prenotazione');        if ($tipologia_prenotazione === 'per_numero_persone') {            $room_types = maybe_unserialize($product->get_meta('_btr_camere'));            if (!empty($room_types)) {                echo '<div class="btr-room-types">';                echo '<h3>Opzioni Camera (facoltative)</h3>';                foreach ($room_types as $room_type => $details) {                    echo '<div class="btr-room-type">';                    echo '<label>' . esc_html($room_type) . ' (€' . esc_html(number_format($details['supplement'], 2)) . ' per notte)</label>';                    echo '<input type="number" name="btr_room_types[' . esc_attr($room_type) . ']" min="0" max="' . esc_attr($details['max']) . '" value="0" />';                    echo '</div>';                }                echo '</div>';            }        }    }    /**     * Aggiunge i dati delle tipologie di camere nel carrello.     */    public function add_meta_to_cart($cart_item_data, $product_id)    {        if (isset($_POST['btr_room_types']) && is_array($_POST['btr_room_types'])) {            $room_types = array_filter($_POST['btr_room_types'], function ($qty) {                return intval($qty) > 0;            });            if (!empty($room_types)) {                $cart_item_data['btr_room_types'] = $room_types;                $cart_item_data['unique_key'] = md5(microtime() . rand());            }        }        return $cart_item_data;    }    /**     * Mostra i dati delle tipologie di camere nel carrello.     */    public function display_meta_in_cart($item_data, $cart_item)    {        if (isset($cart_item['btr_room_types'])) {            foreach ($cart_item['btr_room_types'] as $room => $quantity) {                $item_data[] = [                    'key'   => $room . ' (x' . $quantity . ')',                    'value' => '',                ];            }        }        return $item_data;    }    /**     * Aggiunge i dati delle tipologie di camere all'ordine.     */    public function add_meta_to_order($item, $cart_item_key, $values, $order)    {        if (isset($values['btr_room_types'])) {            $item->add_meta_data('Tipologie Camere', $values['btr_room_types']);        }    }    /**     * Aggiunge i supplementi al totale del carrello.     */    public function add_supplements_to_cart_totals($cart)    {        if (is_admin() && !defined('DOING_AJAX')) {            return;        }        foreach ($cart->get_cart() as $cart_item_key => $cart_item) {            if (isset($cart_item['btr_room_types'])) {                $supplement_total = 0;                foreach ($cart_item['btr_room_types'] as $room => $quantity) {                    $room_lower = strtolower($room);                    $supplement_key = 'btr_supplemento_' . $room_lower . '_max';                    $supplement = get_post_meta($cart_item['variation_id'], $supplement_key, true);                    $supplement_total += floatval($supplement) * $quantity;                }                if ($supplement_total > 0) {                    $cart_item['data']->set_price($cart_item['data']->get_price() + $supplement_total);                }            }        }    }    /**     * Aggiunge i supplementi ai dati della variante.     */    public function add_supplemento_to_variation_data($variation)    {        $variation['_btr_supplemento'] = get_post_meta($variation['variation_id'], '_btr_supplemento', true);        return $variation;    }    /**     * Aggiunge il JS per mostrare il supplemento dinamicamente.     */    public function enqueue_supplemento_js()    {        ?>        <script type="text/javascript">            jQuery(document).ready(function($) {                $('form.variations_form').on('found_variation', function(event, variation) {                    $('.btr-supplemento').remove();                    if (variation._btr_supplemento) {                        const supplemento = parseFloat(variation._btr_supplemento).toFixed(2);                        $('.woocommerce-variation-price').append('<p class="btr-supplemento">Supplemento: €' + supplemento + '</p>');                    }                });                $('form.variations_form').trigger('woocommerce_variation_select_change');            });        </script>        <style>            .btr-supplemento {                font-weight: bold;                color: #555;                margin-top: 10px;            }        </style>        <?php    }}